{"version":3,"sources":["style/assets/down_arrow.svg","hooks/GameData.tsx","hooks/index.tsx","style/global.ts","style/theme.ts","components/styles/Header.ts","components/Header.tsx","helpers/index.tsx","api/fetchFilm.tsx","api/fetchGenres.tsx","components/styles/HiddenText.ts","components/HiddenText.tsx","components/styles/LettersTray.ts","components/LettersTray.tsx","components/styles/GameControllers.ts","components/GameControllers.tsx","components/styles/GameBoard.ts","components/GameBoard.tsx","components/styles/Footer.ts","components/Footer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","GameDataContext","createContext","GameDataProvider","children","useState","storedData","localStorage","getItem","JSON","parse","alreadyPlayed","data","setData","saveMovieId","useCallback","id","a","newAlreadyPlayedList","newData","setItem","stringify","Provider","value","AppProvider","createGlobalStyle","props","theme","colors","text","plain","light","dark","darker","mediumGray","darkGray","Container","styled","header","Title","div","Header","appName","appDescription","upprecaseLettersArr","Array","map","q","w","String","fromCharCode","defaultLetters","allLetters","letter","toLowerCase","getRandom","max","Math","floor","random","getGenreId","genreName","genres","filter","genre","name","fetchFilm","genreId","setNewFilm","fetch","process","then","response","json","result","filmPosition","results","length","str","title","test","indexOf","newFilm","fetchGenres","LetterContainer","span","HiddenText","filmArr","guessedLetters","index","key","LettersContainer","Char","button","disabled","LettersTray","onClickHandler","char","i","onClick","DropdownContainer","Select","select","downArrowSvg","Dropdown","onChange","options","e","target","option","ContentContainer","GenreCard","Text","p","Button","ButtonContainer","HiddenTextContainer","LettersTrayContainer","FilmContainer","ImageContainer","posterImage","PosterOverlay","active","HintButton","FilmInfo","EMPTY_FILM","poster_path","overview","tagline","GameBoard","counter","setCounter","film","setFilm","setGenres","selectedGenre","setSelectedGenre","setGuessedLetters","hintCounter","setHintCounter","from","posterOverlay","setPosterOverlay","context","useContext","Error","useGameData","updateCounter","amount","newPosterOverlay","_","resetState","flushedOverlay","onGetFilmClick","filmId","hearts","useMemo","useEffect","remainingLetters","split","filmLetter","item","status","type","abs","availableIndexes","flatMap","footer","Description","Footer","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.663be73e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/down_arrow.aa86276a.svg\";","import React, { createContext, useCallback, useState, useContext } from 'react';\r\n\r\ninterface IGameData {\r\n  alreadyPlayed: string[];\r\n}\r\n\r\ninterface GameDataContextData {\r\n  alreadyPlayed: string[];\r\n  saveMovieId(id: string): Promise<void>;\r\n}\r\n\r\nconst GameDataContext = createContext<GameDataContextData>(\r\n  {} as GameDataContextData\r\n);\r\n\r\nconst GameDataProvider: React.FC = ({ children }) => {\r\n  const [data, setData] = useState<IGameData>(() => {\r\n    const storedData = localStorage.getItem('@HangmanReact:gameData');\r\n\r\n    if (storedData) {\r\n      return JSON.parse(storedData) as IGameData;\r\n    }\r\n\r\n    return {\r\n      alreadyPlayed: [],\r\n    };\r\n  });\r\n\r\n  // Using Promise because in the future this data will be saved in a database\r\n  const saveMovieId = useCallback(async (id: string): Promise<void> => {\r\n    const newAlreadyPlayedList = [...data.alreadyPlayed, id];\r\n\r\n    const newData = { ...data, alreadyPlayed: newAlreadyPlayedList };\r\n\r\n    localStorage.setItem('@HangmanReact:gameData', JSON.stringify(newData));\r\n\r\n    setData(newData);\r\n  }, [data]);\r\n\r\n  return (\r\n    <GameDataContext.Provider\r\n      value={{ alreadyPlayed: data.alreadyPlayed, saveMovieId }}\r\n    >\r\n      {children}\r\n    </GameDataContext.Provider>\r\n  );\r\n};\r\n\r\nfunction useGameData(): GameDataContextData {\r\n  const context = useContext(GameDataContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useGameData must be used within an GameDataProvider');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { GameDataProvider, useGameData };\r\n","import React from 'react';\r\n\r\nimport { GameDataProvider } from './GameData';\r\n\r\nconst AppProvider: React.FC = ({ children }) => (\r\n  <GameDataProvider>\r\n    {children}\r\n  </GameDataProvider>\r\n);\r\n\r\nexport default AppProvider;","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n\r\n  *{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    outline: 0;\r\n  }\r\n\r\n  body {\r\n    color: ${(props) => props.theme.colors.text};\r\n    -webkit-font-smoothing: antialiazed;\r\n  }\r\n\r\n  body, input, button {\r\n    font-family: 'Roboto', sans-serif;\r\n    font-size: 16px;\r\n  }\r\n\r\n  h1, h1, h2, h3, h4, h5, h6, strong {\r\n    font-weight: 500;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n  }\r\n\r\n\r\n`;\r\n","export const colours = {\n  diamond: '#BCE7FD',\n  eucaliptus: '#40C9A2',\n  iceberg: '#057350',\n  lightest: '#e6f6fe',\n  maastrichtBlue: '#001242',\n  pictonBlue: '#2EB3E8',\n}\n\nconst theme = {\n  colors: {\n    plain: '#DEDEF7',\n    light: '#EFEFFB',\n    dark: '#6462B7',\n    darker: '#4F4DA8',\n    text: '#222',\n    mediumGray: '#777',\n    darkGray: '#303a3e',\n  },\n};\n\nexport default theme;\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.header`\r\n  width: 100%;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n\r\n  background-color: ${(props) => props.theme.colors.dark};\r\n  font-weight: bold;\r\n  font-family: 'Roboto', sans-serif; \r\n  padding: 16px 32px;\r\n`\r\n\r\nexport const Title = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  color: #fff;\r\n\r\n  h1 {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  h2{\r\n    font-size: 0.875rem;\r\n    font-weight: 400;\r\n  }\r\n`","import React from 'react'\nimport { Container, Title } from './styles/Header';\n\ninterface IHeaderProps {\n  appName: string\n  appDescription: string\n}\n\nconst Header = ({ appName, appDescription }: IHeaderProps) => (\n  <Container>\n    <Title>\n      <h1>{appName}</h1>\n      <h2>{appDescription}</h2>\n    </Title>\n  </Container>\n)\n\nexport default Header\n","export const upprecaseLettersArr = [...Array(26)].map((q, w) =>\n  String.fromCharCode(w + 65)\n)\n\nexport const defaultLetters = [\n  ' ',\n  \"'\",\n  ':',\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"?\"\n]\n\nexport const allLetters = [\n  ...defaultLetters,\n  ...upprecaseLettersArr,\n  ...upprecaseLettersArr.map((letter) => letter.toLowerCase())\n]\n\nexport const getRandom = (max: number) => Math.floor(max * Math.random())\n\nexport const testFilm = (str: string) => {\n  const regex = /^[A-Za-z ]+$/\n  return regex.test(str)\n}\n\nexport const getGenreId = (genreName: any, genres: any) => {\n  const selectedGenre = genres.filter((genre: any) => genreName === genre.name)\n  return selectedGenre[0].id\n}\n","import { getRandom, testFilm } from '../helpers'\n\nconst API_MOVIEDB_KEY = process.env.REACT_APP_MOVIEDB_API_KEY\nconst RESULTS_PAGES = 1\n\nexport const fetchFilm = async (\n  genreId: number,\n  alreadyPlayed: string[],\n  setNewFilm: React.Dispatch<React.SetStateAction<{\n    id: string;\n    title: string;\n    poster_path: string;\n    overview: string;\n    tagline: string;\n  }>>): Promise<string> => {\n  const result = await fetch(\n    `https://api.themoviedb.org/3/discover/movie?api_key=${API_MOVIEDB_KEY}&language=en-US&include_adult=false&with_genres=${genreId\n    }&sort_by=vote_count.desc&include_video=false&page=${getRandom(RESULTS_PAGES) + 1}`\n  ).then((response) => response.json())\n\n  let filmPosition = getRandom(result.results.length)\n  while (\n    !testFilm(result.results[filmPosition].title)\n    || alreadyPlayed.indexOf(result.results[filmPosition].id) >= 0\n  ) {\n    filmPosition = getRandom(result.results.length)\n  }\n\n  const newFilm = result.results[filmPosition]\n  setNewFilm(newFilm)\n  return newFilm.id\n}\n\n","const API_MOVIEDB_KEY = process.env.REACT_APP_MOVIEDB_API_KEY\n\nexport const fetchGenres = async () => {\n  return await fetch(\n    `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_MOVIEDB_KEY}&language=en-US`\n  ).then((response) => response.json())\n}\n","import styled from 'styled-components';\r\n\r\ninterface ILetterContainer {\r\n  letter: string\r\n}\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  padding: 8px 0px;\r\n  font-family: 'Roboto';\r\n`\r\n\r\nexport const LetterContainer = styled.span<ILetterContainer>`\r\n  padding: 0 8px;\r\n  display: inline-block;\r\n  border-bottom: ${(props) =>\r\n    props.letter === ' ' ? 'none' : `2px solid ${props.theme.colors.text}`};\r\n  width: 20px;\r\n  padding: 2px;\r\n  text-align: center;\r\n  margin-right: 4px;\r\n  font-size: 20px;\r\n  @media (min-width: 420px) {\r\n    font-size: 22px;\r\n  }\r\n`","import React from 'react'\nimport { Container, LetterContainer } from './styles/HiddenText';\n\ninterface IFilmArr {\n  filmArr: string[]\n  guessedLetters: string[]\n}\n\nconst HiddenText = ({ filmArr, guessedLetters }: IFilmArr) => (\n  <Container>\n    {filmArr.map((letter, index) => (\n      <LetterContainer key={index} letter={letter}>\n        {guessedLetters.indexOf(letter) > -1 ? letter : '?'}\n      </LetterContainer>\n    ))}\n  </Container>\n)\n\nexport default HiddenText\n","import styled from 'styled-components';\r\n\r\nexport const LettersContainer = styled.div`\r\n  display: grid;\r\n\r\n  grid-template-columns: repeat(9, 1fr);\r\n  gap: 8px;\r\n\r\n  margin: 8px auto;\r\n  font-family: 'Roboto';\r\n`\r\n\r\nexport const Char = styled.button`\r\n  background-color: ${(props) => (props.disabled ? props.theme.colors.plain : props.theme.colors.dark)};\r\n  padding: 8px 4px;\r\n  border-radius: 8px;\r\n  font-weight: 700;\r\n  width: 100%;\r\n  color: #fff;\r\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\r\n  border: 0;\r\n  @media (min-width: 420px) {\r\n    font-size: 18px;\r\n  }\r\n`","import React from 'react'\nimport { Char, LettersContainer } from './styles/LettersTray';\nimport { upprecaseLettersArr } from '../helpers'\n\ninterface ILettersTray {\n  guessedLetters: string[]\n  onClickHandler: (char: string) => void\n}\n\nconst LettersTray = ({ guessedLetters, onClickHandler }: ILettersTray) => (\n  <LettersContainer>\n    {upprecaseLettersArr.map((char, i) => (\n      <Char\n        onClick={() => onClickHandler(char)}\n        key={i}\n        value={char}\n        disabled={guessedLetters.indexOf(char) > -1}\n      >\n        {char}\n      </Char>\n    ))}\n  </LettersContainer>\n)\n\nexport default LettersTray\n","import styled from 'styled-components';\r\nimport downArrowSvg from '../../style/assets/down_arrow.svg';\r\n\r\nexport const DropdownContainer = styled.div`\r\n  flex:1;\r\n\r\n  background-color: ${(props) => props.theme.colors.light};\r\n\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 0;\r\n  margin: 0;\r\n\r\n  height: 40px;\r\n  border-radius: 8px;\r\n`\r\n\r\nexport const Select = styled.select`\r\n  -webkit-appearance: none;\r\n  -moz-appearance: none;\r\n  appearance: none;\r\n  background-color: transparent;\r\n  background-image: url(${downArrowSvg});\r\n  background-size: 8px;\r\n  background-repeat: no-repeat;\r\n  background-position-y: 50%;\r\n  background-position-x: calc(100% - 8px);\r\n\r\n  width: 100%;\r\n  text-align: left;\r\n  padding: 8px;\r\n  cursor: pointer;\r\n  border: none;\r\n\r\n  font-size: 18px;\r\n  font-weight: 500;\r\n`","import React from 'react'\nimport { DropdownContainer, Select } from './styles/GameControllers';\n\ninterface IOption {\n  name: string\n}\n\ninterface IDropdown {\n  options: IOption[]\n  onClick: any\n  onChange: any\n  title?: string\n}\n\nexport const Dropdown = ({ onClick, onChange, title, options }: IDropdown) => (\n  <DropdownContainer>\n    <Select onClick={() => onClick('')} onChange={(e) => onChange(e.target.value)}>\n      <option value={''}>Choose a genre:</option>\n      {options.map((option, index) => (\n        <option key={index} value={option.name}>\n          {option.name}\n        </option>\n      ))}\n    </Select>\n  </DropdownContainer>\n)\n","import styled from 'styled-components';\r\n\r\ninterface ImageContainerProps {\r\n  posterImage: string;\r\n}\r\n\r\ninterface PosterOverlayProps {\r\n  active?: boolean;\r\n}\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  color: ${(props) => props.theme.colors.text};\r\n  padding: 16px 32px;\r\n  background-color: ${(props) => props.theme.colors.plain};\r\n  min-height: calc(100vh - 130px);\r\n  @media (min-width: 420px) {\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nexport const ContentContainer = styled.div`\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n`\r\n\r\nexport const GenreCard = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  background-color: #fff;\r\n  padding: 16px 24px;\r\n\r\n  border-radius: 8px;\r\n`\r\n\r\nexport const Text = styled.p`\r\n  font-size: 18px;\r\n\r\n  svg{\r\n    margin-left: 8px;\r\n    color: ${(props) => props.theme.colors.dark};\r\n  }\r\n`\r\n\r\nexport const Button = styled.button`\r\n  color: white;\r\n  background-color: ${(props) => props.theme.colors.dark};\r\n  text-transform: uppercase;\r\n  border-radius: 8px;\r\n\r\n  height:40px;\r\n\r\n  font-weight: bold;\r\n  padding: 8px 16px;\r\n  text-align: center;\r\n  -webkit-transition-duration: 0.2s; /* Safari */\r\n  transition-duration: 0.2s;\r\n  border: none;\r\n  width: auto;\r\n  box-shadow: 0px 3px 15px rgba(0, 0, 0, 0.2);\r\n\r\n  &:hover {\r\n    background-color: ${(props) => props.theme.colors.darker};\r\n  }\r\n  @media (min-width: 420px) {\r\n    font-size: 18px;\r\n  }\r\n`\r\n\r\nexport const RoundButton = styled(Button)`\r\n  border-radius: 50%;\r\n  width: 90px;\r\n  min-width: 90px;\r\n  height: 90px;\r\n  align-self: flex-end;\r\n  margin: 0 auto;\r\n`\r\n\r\nexport const ButtonContainer = styled.div`\r\n  margin-left: 16px;\r\n`\r\n\r\nexport const HiddenTextContainer = styled.div`\r\n  background-color: #FFF;\r\n  border-radius: 8px;\r\n\r\n  margin-top: 16px;\r\n\r\n  padding: 16px 24px;\r\n`\r\n\r\nexport const LettersTrayContainer = styled.div`\r\n  background-color: #FFF;\r\n  border-radius: 8px;\r\n\r\n  margin-top: 16px;\r\n\r\n  padding: 16px 24px;\r\n`;\r\n\r\nexport const FilmContainer = styled.div`\r\n  background-color: #FFF;\r\n  border-radius: 8px;\r\n\r\n  margin-top: 16px;\r\n\r\n  padding: 24px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n`;\r\n\r\nexport const ImageContainer = styled.div<ImageContainerProps>`\r\n  background: url(${(props) => `http://image.tmdb.org/t/p/w154${props.posterImage}`});\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  width: 250px;\r\n  height: 345px;\r\n\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n\r\n  position: relative;\r\n\r\n  display: grid;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-template-rows: repeat(7, 1fr);\r\n`\r\n\r\nexport const PosterOverlay = styled.div<PosterOverlayProps>`\r\n  background-color: ${(props) => props.active ? 'transparent' : props.theme.colors.plain};\r\n`\r\n\r\nexport const HintButton = styled.button`\r\n  position: absolute;\r\n\r\n  bottom: 0;\r\n\r\n  padding: 8px;\r\n\r\n  background-color: ${(props) => props.theme.colors.dark};\r\n  color: #fff;\r\n  border: 0;\r\n\r\n  width: 100%;\r\n\r\n  h4 {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nexport const FilmInfo = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: flex-start;\r\n\r\n  h3 {\r\n    margin-bottom: 16px;\r\n  }\r\n\r\n  margin-left: 16px;\r\n`;","import React, { useState, useEffect, useMemo } from 'react'\n\nimport { allLetters, getGenreId, defaultLetters, getRandom } from '../helpers'\nimport { fetchGenres, fetchFilm } from '../api'\n\nimport { useGameData } from '../hooks/GameData';\n\nimport HiddenText from '../components/HiddenText'\nimport LettersTray from '../components/LettersTray'\nimport { Dropdown } from '../components/GameControllers'\n\nimport { FaHeart } from 'react-icons/fa'\n\nimport {\n  Container,\n  ContentContainer,\n  GenreCard,\n  Button,\n  ButtonContainer,\n  HiddenTextContainer,\n  LettersTrayContainer,\n  FilmContainer,\n  ImageContainer,\n  HintButton,\n  FilmInfo,\n  PosterOverlay,\n  Text\n} from './styles/GameBoard'\n\ninterface FilmInfo {\n  id: string;\n  title: string;\n  poster_path: string;\n  overview: string;\n  tagline: string;\n}\n\nconst EMPTY_FILM: FilmInfo = {\n  id: '',\n  title: '',\n  poster_path: '',\n  overview: '',\n  tagline: ''\n}\n\nconst MAX_ATTEMPTS = 7\nconst MAX_HINT_COUNT = 2\nconst INITIAL_HINT_COST = 2\nconst MIN_HINT_COST = 1\n\nconst GameBoard = () => {\n  const [counter, setCounter] = useState(MAX_ATTEMPTS)\n  const [film, setFilm] = useState(EMPTY_FILM)\n  const [genres, setGenres] = useState<any[]>([])\n  const [selectedGenre, setSelectedGenre] = useState({ id: 99 })\n  const [guessedLetters, setGuessedLetters] = useState<string[]>(defaultLetters)\n  const [hintCounter, setHintCounter] = useState(0)\n  const [posterOverlay, setPosterOverlay] = useState(\n    Array.from({ length: 28 }, () => true)\n  )\n\n  const { alreadyPlayed, saveMovieId } = useGameData();\n\n  const updateCounter = (amount: number) => {\n    if (counter + amount < 1) {\n      const newPosterOverlay = posterOverlay.map(_ => false)\n      setPosterOverlay(newPosterOverlay)\n    }\n    setCounter(counter + amount)\n  }\n\n  const onCharClick = (char: string) => {\n    setGuessedLetters([...guessedLetters, char, char.toLowerCase()])\n    return film.title.indexOf(char) > -1 ||\n      film.title.indexOf(char.toLowerCase()) > -1\n      ? null\n      : updateCounter(-1)\n  }\n\n  const resetState = () => {\n    setFilm(EMPTY_FILM)\n    setGuessedLetters(defaultLetters)\n    setCounter(MAX_ATTEMPTS)\n    setHintCounter(0)\n\n    const flushedOverlay = posterOverlay.map(() => true)\n    setPosterOverlay(flushedOverlay)\n  }\n\n  const onGetFilmClick = async () => {\n    resetState()\n    const genreId = getGenreId(selectedGenre, genres)\n    const filmId = await fetchFilm(genreId, alreadyPlayed, setFilm)\n    saveMovieId(filmId)\n  }\n\n  const onHintClick = () => {\n    updateCounter(-Math.max(MIN_HINT_COST, Math.abs(hintCounter - INITIAL_HINT_COST)))\n\n    const newPosterOverlay = posterOverlay\n    const availableIndexes = newPosterOverlay\n      .flatMap((item, index) => (item ? [index] : []))\n    const randomAvailableIndex = availableIndexes[getRandom(availableIndexes.length)]\n\n    newPosterOverlay[randomAvailableIndex] = false\n\n    setHintCounter(hintCounter + 1)\n\n    setPosterOverlay(newPosterOverlay)\n  }\n\n  const hearts = useMemo(() => {\n    return Array.from({ length: counter }, (_, index) => ({ id: `Heart-${index}` }))\n  }, [counter])\n\n  useEffect(() => {\n    fetchGenres().then((result) => setGenres(result.genres))\n  }, [])\n  useEffect(() => {\n    if (counter < 1) {\n      setGuessedLetters(allLetters)\n    }\n    const remainingLetters = film.title.split('').filter((filmLetter) => guessedLetters.indexOf(filmLetter) === -1)\n    if (film.title !== '' && remainingLetters.length === 0) {\n      setGuessedLetters(allLetters)\n    }\n  }, [film.title, guessedLetters, counter])\n  return (\n    <Container>\n      <ContentContainer>\n        <GenreCard>\n          {genres && genres.length > 0 && (\n            <Dropdown\n              options={genres}\n              title=\"\"\n              onClick={() => setFilm(EMPTY_FILM)}\n              onChange={setSelectedGenre}\n            />\n          )}\n          <ButtonContainer>\n            <Button onClick={onGetFilmClick}>Get film</Button>\n          </ButtonContainer>\n        </GenreCard>\n        {film.title !== '' && (\n          <>\n            <HiddenTextContainer>\n              <HiddenText filmArr={film.title.split('')} guessedLetters={guessedLetters} />\n            </HiddenTextContainer>\n\n            <LettersTrayContainer>\n              <Text>{counter > 0 && (\n                <>\n                  Guesses left:\n                  {hearts.map(item => (\n                  <FaHeart key={item.id} />\n                ))}\n                </>\n              )}\n              </Text>\n              <LettersTray\n                guessedLetters={guessedLetters}\n                onClickHandler={onCharClick}\n              />\n            </LettersTrayContainer>\n\n            <FilmContainer>\n              <ImageContainer posterImage={film.poster_path}>\n                {posterOverlay.map((status, index) => (\n                  <PosterOverlay key={`Overlay-${index}`} active={!status} />\n                ))}\n\n                {counter > 0 && hintCounter < MAX_HINT_COUNT && (\n                  <HintButton type=\"button\" onClick={onHintClick}>\n                    <h4>HINT</h4>\n                    <p>This will cost you {Math.abs(hintCounter - INITIAL_HINT_COST)} guesse(s)!</p>\n                  </HintButton>\n                )}\n              </ImageContainer>\n\n              {counter < 1 && (\n                <FilmInfo>\n                  <h3>{film.title}</h3>\n                  {film.overview || film.tagline ? (\n                    <p>{film.overview || film.tagline}</p>\n                  ) : null}\n                </FilmInfo>\n              )}\n            </FilmContainer>\n          </>\n        )}\n      </ContentContainer>\n    </Container>\n  )\n}\n\nexport default GameBoard\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.footer`\r\n  width: 100%;\r\n  color: #fff;\r\n  background-color: ${(props) => props.theme.colors.dark};\r\n  font-weight: bold;\r\n  font-family: 'Courier New', Courier, monospace;\r\n  padding: 16px 32px;\r\n  text-align: center;\r\n`\r\n\r\nexport const Description = styled.p`\r\n  margin: 0;\r\n  & a {\r\n    color: inherit;\r\n  }\r\n`","import React, { ReactElement } from 'react'\nimport { Description, Container } from './styles/Footer';\n\ninterface IFooter {\n  children: ReactElement<any>\n}\n\nconst Footer = ({ children }: IFooter) => (\n  <Container>\n    <Description>\n      {children}\n    </Description>\n  </Container>\n)\n\nexport default Footer\n","import React from 'react'\nimport AppProvider from './hooks';\n\nimport { ThemeProvider } from 'styled-components';\nimport GlobalStyle from './style/global';\nimport theme from './style/theme';\n\nimport Header from './components/Header'\nimport GameBoard from './components/GameBoard'\nimport Footer from './components/Footer'\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <AppProvider>\n      <Header appName={'Hangman'} appDescription={'Guess the film'} />\n      <GameBoard />\n      <Footer>\n        <span>This project is available on{' '}\n          <a href=\"https://github.com/zurda/hangman-react\">Github</a></span>\n      </Footer>\n      <GlobalStyle />\n    </AppProvider>\n  </ThemeProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}